<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sprite_Ball_64</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1010</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Sprite

Ball_Sprite = Sprite_Ball_64;

//Movement

global.Ball_Gravity = 0.5;
global.Ball_Gravity_Direction = 270;

global.Ball_Jump_Height = 12.5;

global.Ball_Vertical_Direction = false;
global.Ball_Horizontal_Direction = false;

global.Ball_Horizontal_Limit = 5;

//Stat

global.Ball_Water = 0;
global.Ball_Water_Max = 100;
global.Ball_Water_Charge = 0;

global.Ball_Pollution = 0;

//Camera

global.Camera_Center_X = room_width / 2;
global.Camera_Center_Y = room_height / 2;

global.Camera_Angle = 0;

//Controll

global.Controll_Left = false;
global.Controll_Right = false;

//Device

global.Display_Width = display_get_width()
global.Display_Height = display_get_height()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.Stage_Death[ global.Stage_Number ]++;
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Controll

if( device_mouse_check_button( 0, mb_left ) || device_mouse_check_button( 1, mb_left ) ) {

    if( device_mouse_check_button( 0, mb_left ) &amp;&amp; device_mouse_raw_x( 0 ) &lt; global.Display_Width / 2 ) { global.Controll_Left = true; }
    else if( device_mouse_check_button( 1, mb_left ) &amp;&amp; device_mouse_raw_x( 1 ) &lt; global.Display_Width / 2 ) { global.Controll_Left = true; }
    else { global.Controll_Left = false; }
    
    if( device_mouse_check_button( 0, mb_left ) &amp;&amp; device_mouse_raw_x( 0 ) &gt;= global.Display_Width / 2 ) { global.Controll_Right = true; }
    else if( device_mouse_check_button( 1, mb_left ) &amp;&amp; device_mouse_raw_x( 1 ) &gt;= global.Display_Width / 2 ) { global.Controll_Right = true; }
    else { global.Controll_Right = false; }

} else { global.Controll_Left = false; global.Controll_Right = false; }



//else { global.Controll_Left = false; global.Controll_Right = false; }

//Movement

gravity = global.Ball_Gravity;
gravity_direction = global.Ball_Gravity_Direction

if( ( keyboard_check( ord('A') ) &amp;&amp; !keyboard_check( ord('D') ) ) || ( global.Controll_Left == true ) ) {

    global.Ball_Horizontal_Direction = false;
    hspeed -= 0.5;
    if( hspeed &lt; -global.Ball_Horizontal_Limit ) { hspeed = -global.Ball_Horizontal_Limit; }
    
}
if( ( keyboard_check( ord('D') ) &amp;&amp; !keyboard_check( ord('A') ) ) || ( global.Controll_Right == true ) ) {

    global.Ball_Horizontal_Direction = true;
    hspeed += 0.5;
    if( hspeed &gt; global.Ball_Horizontal_Limit ) { hspeed = global.Ball_Horizontal_Limit; }
    
}

if( hspeed &gt; 0 ) {

    hspeed -= 0.1;
    if( !place_free( x + hspeed + 0.1 , y ) ) { hspeed = - hspeed / 2 }

}
if( hspeed &lt; 0 ) {

    hspeed += 0.1;
    if( !place_free( x + hspeed - 0.1 , y ) ) { hspeed = - hspeed / 2 }

}

x = round( x );
y = round( y );

//Camera
if( x &lt; global.Camera_Center_X ) {

    if( y &lt; global.Camera_Center_Y ) { global.Camera_Angle = ( point_distance( x, y, global.Camera_Center_X, global.Camera_Center_Y ) / point_distance( 0, 0, global.Camera_Center_X, global.Camera_Center_Y ) ); }
    else if( y &gt; global.Camera_Center_Y ) { global.Camera_Angle = -( point_distance( x, y, global.Camera_Center_X, global.Camera_Center_Y ) / point_distance( 0, 0, global.Camera_Center_X, global.Camera_Center_Y ) ); }
    else { global.Camera_Angle = 0; }
    
}
else if( x &gt; global.Camera_Center_X ) {

    if( y &lt; global.Camera_Center_Y ) { global.Camera_Angle = -( point_distance( x, y, global.Camera_Center_X, global.Camera_Center_Y ) / point_distance( 0, 0, global.Camera_Center_X, global.Camera_Center_Y ) ); }
    else if( y &gt; global.Camera_Center_Y ) { global.Camera_Angle = point_distance( x, y, global.Camera_Center_X, global.Camera_Center_Y ) / point_distance( 0, 0, global.Camera_Center_X, global.Camera_Center_Y ); }
    else { global.Camera_Angle = 0; }
    
}
else { global.Camera_Angle = 0; }
view_angle[0] = global.Camera_Angle * 15 * ( point_distance( x, 0, global.Camera_Center_X, 0 ) / global.Camera_Center_X ) * ( point_distance( 0, y, 0, global.Camera_Center_Y ) / global.Camera_Center_Y );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Object_Pipe_64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid( direction, -1 );

//Vertical

if( y + ( sprite_height / 2 ) - 2 &lt; other.y - ( other.sprite_height / 2 ) ) {

    if( global.Completion == 0 ) {
    
        global.Completion = floor( (  1 / ( global.Stage_Fire + 1 ) + ( global.Stage_Fire - instance_number( Object_Fire_64 ) ) / ( global.Stage_Fire + 1 ) ) * 100 ) / 100;
        if( global.Stage_Completion[ global.Stage_Number ] &lt; global.Completion ) { global.Stage_Completion[ global.Stage_Number ] = global.Completion; }
    
    } else { global.Stage_Completion[ global.Stage_Number ] = global.Completion; }
    
    if( global.Stage_Number + 1 &lt; array_length_1d( global.Stage_Room ) ) {
    
        global.Stage_Unlock[ global.Stage_Number + 1 ] = true;
    
    }

    room_goto( Room_Complete );

}
else{

    vspeed = 0;

}

x = round( x );
y = round( y );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Object_Wall_Parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid( direction, -1 );

//Vertical

if( y + ( sprite_height / 2 ) - 2 &lt; other.y - ( other.sprite_height / 2 ) ) {

    vspeed = - global.Ball_Jump_Height;

}
else{

    vspeed = 0;

}

x = round( x );
y = round( y );

repeat( 10 ) {

    with( instance_create( x, y + ( sprite_height / 2 ), Object_Effect_Drop ) ) {
    
        motion_add( random_range( 30, 150 ), random_range( 5, 10 ) );
    
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext( sprite_index, -1, x, y + 4, image_xscale, image_yscale, 0, c_dkgray, 0.5 );
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
